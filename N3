

// Dynamically load the CryptoJS library
var script = document.createElement('script');
script.src = 'https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js';
document.head.appendChild(script);

// Wait for the script to load before executing your code
script.onload = function() {

   // Retrieve and decrypt the value from localStorage
    const storedEncryptedValue = localStorage.getItem('CaptchaApikey');
    const decryptedValue = CryptoJS.AES.decrypt(storedEncryptedValue, 'secret-passphrase').toString(CryptoJS.enc.Utf8);
   // console.log('Decrypted value:', decryptedValue);
    
   

 var captchaApikey = decryptedValue;

  const captcha = {
    enabled: 'true',
    apiKey: captchaApikey,
  };


    const autoSubmitForms = {
  login: localStorage.autoLogin,
  loginCaptcha: localStorage.captchaautosolve,
  appointmentCaptcha: localStorage.captchaautosolve,
  visaType: 'on',
  slotSelection: 'on',
  applicantSelection: 'on',
}





  function removeRandomnessFromUi () {
    // Center main content
    $('.row:has(> .captcha-div) > [class^=col-]').hide()
    $('.captcha-div').addClass('mx-auto')
  }
 function getCaptchaTarget () {
    return $('.box-label')
      .sort((a, b) => getComputedStyle(b).zIndex - getComputedStyle(a).zIndex)
      .first()
      .text()
      .replace(/\D+/, '')
  }

 function getCaptchaGrid () {
    // From top-to-bottom and left-to-right
    return $(':has(> .captcha-img):visible').get()
      // Group by top position
      .reduce((acc, cur) => {
        (acc[Math.floor(cur.offsetTop)] ??= []).push(cur)
        return acc
      }, [])
      .flatMap(sortedByTop => {
        const sortedByZIndex = sortedByTop.sort((a, b) => getComputedStyle(b).zIndex - getComputedStyle(a).zIndex)
        const top3 = sortedByZIndex.slice(0, 3) // max cells
        const sortedByLeft = top3.sort((a, b) => a.offsetLeft - b.offsetLeft)
        return sortedByLeft
      })
      .map(element => element.firstElementChild)
  }

  function solveCaptcha () {
    if (!(/on|true/.test(captcha.enabled) && captcha.apiKey)) return

    const target = getCaptchaTarget();
    const grid = getCaptchaGrid();

    const extractCaptchaGridData = grid => Object.fromEntries(grid.map(img => img.src).entries())

    const onSuccess = result => {
      if (result.status === 'solved') {
        // Apply solution
        Object.entries(result.solution).forEach(([index, value]) => value === target && grid[index].click())
        // Auto submit
        ;/on|true/.test(autoSubmitForms?.appointmentCaptcha) && $('#btnVerify').trigger('click')
      } else {
        onError('captchaerror', result)
      }
    }
    const onError = (type, data) => {
      console.error(type, data)
      $('.validation-summary-valid').html('<b>Failed to solve captcha.</b>')
    }

		$.post({
			url: 'https://pro.nocaptchaai.com/solve',
			headers: { apiKey: captcha.apiKey },
			contentType: 'application/json',
			dataType: 'json',
			data: JSON.stringify({
				method: 'ocr',
				id: 'morocco',
				images: extractCaptchaGridData(grid),
			}),
      timeout: 30_000,

			complete (xhr, state) {
				this._loading?.remove()

				switch (state) {
					case 'success':
						onSuccess(xhr.responseJSON)
						break
					case 'error':
					case 'parsererror':
						onError(state, xhr)
						break
				}
			},
		})
  }




 function start () {
    console.log(`${this.constructor.name} started`)
var VisaTypeCaptchaAutoSolve = localStorage.getItem('Captcha Visa Type Auto Solve')
    removeRandomnessFromUi()
     if(localStorage.captchaautosolve == 'true' && VisaTypeCaptchaAutoSolve == 'true' ){
    solveCaptcha();
     }
  }



start();






};

